[workspace]
resolver = "2"
members = [
  "core/*",
  "core/interfaces/proc",
  "etc/workspace-hack",
  "lib/*",
  "lib/sgxkit/sys",
  "services/*",
  "services/ai/examples/rust/*",
]
exclude = [
  "lib/cdk",
  "lib/blake3-js",
  "lib/cdk-x-platform-test",
  "lib/dcap-quoteprov",
  "services/sgx",
  "etc/ebpf-apps/ebpf",
  "etc/ebpf-apps/common",
  "etc/ebpf-apps/guard",
  "etc/tui",
]

[workspace.package]
version = "0.1.0"
edition = "2021"

[workspace.dependencies]
lightning-workspace-hack = "0.1.0"
anyhow = "1.0"
async-trait = "0.1"
axum = { version = "0.6.18", features = ["tokio"] }
bincode = "1.3.3"
bit-set = { version = "0.8.0", features = ["serde"] }
cid = "0.10.1"
console-subscriber = { version = "0.4.0" }
ethers = "2.0.10"
num-bigint = "0.4.0"
base64 = "0.21"
bytes = { version = "1.7", features = ["serde"] }
futures = "0.3"
lru = "0.10.0"
multihash = "0.19"
pretty_assertions = "1.4.0"
rand = { version = "0.8.5", features = ["small_rng"] }
reqwest = { version = "0.11.20", features = ["rustls-tls", "json"] }
serde = { version = "1.0", features = ["derive"] }
serde-big-array = "0.5.1"
serde_json = "1.0.96"
humantime-serde = "1.1.1"
jsonrpsee = { version = "0.21", features = ["full"] }
thiserror = "1.0"
parking_lot = "0.12.1"
tokio = { version = "1.28", features = ["full", "tracing"] }
tokio-stream = "0.1"
tokio-util = { version = "0.7", features = ["time"] }
toml = "0.7.4"
tracing = "0.1.37"
tracing-subscriber = { version = "0.3", features = ["fmt", "json"] }
zeroize = "1.6"
serde_with = "3.8.1"
scc = "1.8.1"
num-traits = "0.2.15"
num-derive = "0.4.2"
lazy_static = "1.4.0"
schemars = "0.8.21"
rkyv = { version = "0.7.44", features = [
  "validation",
  "alloc",
  "std",
  "hashbrown",
  "bytecheck",
] }
triomphe = "0.1"
tempfile = "3.10.1"
hyper = { version = "0.14.27", features = ["server", "full"] }
tower = { version = "0.4.13", features = ["tokio", "steer"] }
hex = { version = "0.4.3", features = ["serde"] }

# Our libraries
lightning-application = { path = "core/application" }
lightning-blockstore = { path = "core/blockstore" }
lightning-blockstore-server = { path = "core/blockstore-server" }
lightning-broadcast = { path = "core/broadcast" }
lightning-checkpointer = { path = "core/checkpointer" }
lightning-consensus = { path = "core/consensus" }
lightning-firewall = { path = "core/firewall" }
lightning-forwarder = { path = "core/forwarder" }
lightning-interfaces = { path = "core/interfaces" }
lightning-keystore = { path = "core/keystore" }
lightning-node = { path = "core/node" }
lightning-notifier = { path = "core/notifier" }
lightning-pool = { path = "core/pool" }
lightning-rep-collector = { path = "core/rep-collector" }
lightning-resolver = { path = "core/resolver" }
lightning-rpc = { path = "core/rpc" }
lightning-service-executor = { path = "core/service-executor" }
lightning-signer = { path = "core/signer" }
lightning-syncronizer = { path = "core/syncronizer" }
lightning-test-utils = { path = "core/test-utils" }
lightning-topology = { path = "core/topology" }
lightning-types = { path = "core/types" }
lightning-utils = { path = "core/utils" }
affair = { path = "lib/affair" }
atomo = { path = "lib/atomo" }
atomo-rocks = { path = "lib/atomo-rocks" }
fleek-crypto = { path = "lib/fleek-crypto" }
fleek-ipld = { path = "lib/fleek-ipld" }
hp-fixed = { path = "lib/hp-fixed" }
ink-quill = { path = "lib/ink-quill" }
socket-logger = { path = "lib/socket-logger" }
ready = { path = "lib/ready" }
resolved-pathbuf = { path = "lib/resolved-pathbuf" }
panic-report = { path = "lib/panic-report" }
better-shutdown = { path = "lib/better-shutdown" }
fleek-blake3 = "1.5"
merklize = { path = "lib/merklize" }

# This ensures that while building within the workspace, the real workspace-hack is used. When
# building outside of the workspace, such as via a Git or path dependency, the [patch] directive
# is inactive, and the stub crate from crates.io is used.
# See https://docs.rs/cargo-hakari/0.9.29/cargo_hakari/patch_directive/index.html
[patch.crates-io.lightning-workspace-hack]
path = "etc/workspace-hack"

# Since MystenLabs uses Hakari in the sui repository, and we bring narwhal in from there, this
# results into all of their dependencies and packages to be listed in their workspace-hack crate.
# That adds a huge amount of unwanted dependencies to our crate. The `empty-workspace-hack` is an
# empty crate which only depends on `strum` which is the only dependency narwhal cared about.
[patch.'https://github.com/MystenLabs/sui.git']
workspace-hack = { git = "https://github.com/fleek-network/empty-workspace-hack.git", rev = "c07eb1e343a455d57a5481b50eada03c62b4f2c6" }
sui-types = { git = "https://github.com/daltoncoder/narwhal-hack.git" }
sui-keys = { git = "https://github.com/daltoncoder/narwhal-hack.git" }

[profile.release]
# include some debug info, useful for backtraces
debug = 1
# perform "fat" link time optimization on the workspace and all dependencies
lto = true
# enables full optimization, disregarding binary size, with loop vectorization
opt-level = 3
# On panic terminate the process.
panic = 'abort'
